General R/Rstudio assessment 

Task 3.1/ evaluate the sum of all integers between 5 and 55

```{r}
## The first line of code creates a variable called result and assigns it the sum of all integers between 5 and 55 (inclusive). The 5:55 syntax generates a sequence of integers from 5 to 55, and the sum() function adds up all the numbers in that sequence. The result is then stored in the result variable.
## The second line of code prints the value of the result variable to the console. The print() function is used to display the value of result.
result <- sum(5:55)
print(result)
```
Task 3.2/ Sumfun function
```{r}
## Here, we define a function named sumfun that takes a single parameter n. The purpose of this function is to compute the sum of the integers from 5 to n, inclusive.
## sum(5:n) this line uses the sum() function to add up the values in the sequence 5:n, which is a sequence of integers starting at 5 and ending at n. The resulting sum is returned as the output of the function.
sumfun <- function(n) {sum(5:n)}
sumfun (10)
## So, when you call sumfun(10), for example, the function will compute the sum of the integers from 5 to 10, which is 5 + 6 + 7 + 8 + 9 + 10 = 45, and return the value 45.
```
```{r}
sumfun(20)
```
```{r}
sumfun(100)
```
```{r}
## This script first initializes a numeric vector of length 12 named fib to store the Fibonacci numbers. It sets the first two entries of the vector to 1, which are the first two steps in the sequence.
## Then it uses a for loop to calculate the remaining 10 entries of the sequence. Each Fibonacci number is the sum of the two preceding numbers, so the loop calculates fib[j] as the sum of fib[j-1] and fib[j-2].
fib <- numeric(12)
fib[1] <- 1
fib[2] <- 1
for (j in 3:12) {
  fib[j] <- fib[j-1] + fib[j-2]
}
print(fib)
## Finally, the script prints out the resulting vector of Fibonacci numbers using the print() function.
```
Task 3.4/ 
```{r}
library(ggplot2)
ggplot(data = mtcars, aes(x= as.factor(gear), y= mpg)) + geom_boxplot(aes(fill= as.factor(gear) )) + ggtitle(" Box plot of Miles per gallon(mpg) as a function of gears")

```
Task 3.5/ 
```{r}
x <- cars $dist; y <- cars $speed;
nfunction <- lm(formula = "y ~ x")
summary(nfunction)
```
Task 3.6/ 
```{r}
library(ggplot2)
## the ggplot function is assigned to the variable gg1plot
abc <- ggplot(data = cars, aes (x= speed, y= dist)) +geom_point() + geom_smooth(method = "lm", formula = "y ~ x")
## here we are creating a new variable and naming it gg2plot, and we are adding a title and labels for x and y
bcd <- abc + ggtitle("Breaking distance x speed: a linear model")+ xlab("Speed (miles/h)")+ ylab("Distance (feet)")
bcd
```

Task 3.7/
```{r}
## First, we determine the variable "distance" as breaking distance in miles
dist_m <- cars$dist/ 0.000189 ## this is the conversion of the distance to miles by dividing the t value of a foot
## Now we determine the "Speed_miles_hour" 
speed_m_h<- cars$speed^2 ## Breaking distance is proportional to the speed squared
lm(formula = dist_m ~ speed_m_h)

## The model show a slope equal to half the average reaction time, when speed and distance are constant
R_time <- 2.438e-05*2 
## Here we convert the reaction time from hours to seconds
convert_R_time <- R_time/3600
convert_R_time 
## We can clearly see that the results are not reasonable since 

library(ggplot2)
F_plot <- ggplot (data = cars, aes (x= speed, y= dist)) + geom_point ()
S_plot <- F_plot+ geom_smooth(method = "lm", formula = "dist_m ~ speed_m_h")
T_plot <- S_plot + ggtitle("Breaking distance x speed: a regression model")
F_plot
```
RNA-seq assessment 

Task 3.8/ Read count data

```{r}
# Read input file with count data
all_counts <- read.csv(file = "/Users/jemilaabderrahmane/Downloads/LMS_RNAseq_short-master-2023-final/course/exercises/data/exercise1_counts.csv", row.names = 1)

# Explore data
head(all_counts)

# Read input file with sample description
sample_desc <- read.table(file = "/Users/jemilaabderrahmane/Downloads/LMS_RNAseq_short-master-2023-final/course/exercises/data/exercise1_sample_description.info", sep = "\t", header = TRUE)

# Exploring data
head(sample_desc)
```
Task 3.9/ Creating col_data and check dimensions

```{r}
# Prepare data for DESeq
collect_data <- data.frame(Sample = sample_desc$sample,
                  Group = sample_desc$condition,
                  Batch = sample_desc$batch)

# Store data as factors
collect_data$Sample <- as.factor(collect_data$Sample)
collect_data$Group <- as.factor(collect_data$Group)
collect_data$Batch <- as.factor(collect_data$Batch)

# Check dimensions
all(colnames(all_counts) == sample_desc$Sample)
```
Task 3.10/ Constructing DESeqDataSet object using count data and sample description

```{r}
# Load DESeq2 library
library(DESeq2)


# Build DESeq dataset
dds <- DESeqDataSetFromMatrix(countData= all_counts, colData= collect_data, design= ~Group)

# Apply DESeq normalization
dds <- DESeq(dds)

# Obtain results from DESeq
FResult <- results(dds)
head(FResult)
```
Task 3.11/ Performing regulised logarithm and Variance Stabilizing Transformation on the data
```{r}
# Regularized log transformation
rld <- rlog(dds)
class(rld)

# Get rld in count format
rld_counts <- assay(rld)
class(rld_counts)
# Regularized log transformation
vsd <- varianceStabilizingTransformation(dds)
class(vsd)
# Get rld in count format
vsd_counts <- assay(vsd)
class(vsd_counts)
```
Task 3.12/ Drawing a heatmap of count matrix based on the top 40 highly expressed genes using rlog and VST data

```{r}
# Load pheatmap library
library("pheatmap")

# Get dds normalized counts
dds_counts <- counts(dds, normalized = TRUE)
head(dds_counts)

# Get normalized counts - 40 higher values
select <- order(rowMeans(dds_counts), decreasing = TRUE)[1:40]
head(select)

# Heatmap of the rlog transformed data
pheatmap(assay(rld)[select, ])

# Heatmap of the vst transformed data
pheatmap(assay(vsd)[select, ])
```
Task 3.13/ Generating a Sample Distance Matrix to see the clustering of count data

```{r}
# Sample Distance Matrix
print("Sample Distance Matrix")

# Compute SDM from rlog transformed data
sample_dist <- dist(t(assay(rld)))
class(sample_dist)

# Get SDM in matrix form
sdm <- as.matrix(sample_dist)
class(sdm)

# Load library
library("RColorBrewer")

# Add row names for clear plot
rownames(sdm) <- rld$Group
colnames(sdm) <- NULL

# Add colors
colors <- colorRampPalette(rev(brewer.pal(9, "Blues")))(255)

# Plot heatmap
pheatmap(sdm,
         clustering_distance_rows = sample_dist,
         clustering_distance_cols = sample_dist,
         col = colors)
```
Task 3.14/ Performing the Principal Component Analysis using rlog method and find out the % significance values of first two principal components

```{r}
# Principal Component Analysis
print("Principal Component Analysis")

# PCA plot on our rld transformed data
plotPCA(rld, intgroup = "Group")

# Save figure
library(ggplot2)
ggsave(file = "/Users/jemilaabderrahmane/Downloads/LMS_RNAseq_short-master-2023-final/course/figures/PCA_plot_rld_FINAL.png")

```
Task 3.15/ Repeating the PCA, this time using VST method and compare the plots with the ones obtained using rlog method
```{r}
# PCA plot on our rld transformed data
plotPCA(vsd, intgroup = "Group")

# Save figure
library(ggplot2)
ggsave(file = "/Users/jemilaabderrahmane/Downloads/LMS_RNAseq_short-master-2023-final/course/figures/PCA_plot_vst_FINAL.png")
```
